//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace messageBroker {

public class nodeConfig : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal nodeConfig(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(nodeConfig obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~nodeConfig() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CSharpWrapperPINVOKE.delete_nodeConfig(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public string WSHost {
    set {
      CSharpWrapperPINVOKE.nodeConfig_WSHost_set(swigCPtr, value);
      if (CSharpWrapperPINVOKE.SWIGPendingException.Pending) throw CSharpWrapperPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = CSharpWrapperPINVOKE.nodeConfig_WSHost_get(swigCPtr);
      if (CSharpWrapperPINVOKE.SWIGPendingException.Pending) throw CSharpWrapperPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int WSPort {
    set {
      CSharpWrapperPINVOKE.nodeConfig_WSPort_set(swigCPtr, value);
    } 
    get {
      int ret = CSharpWrapperPINVOKE.nodeConfig_WSPort_get(swigCPtr);
      return ret;
    } 
  }

  public string name {
    set {
      CSharpWrapperPINVOKE.nodeConfig_name_set(swigCPtr, value);
      if (CSharpWrapperPINVOKE.SWIGPendingException.Pending) throw CSharpWrapperPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = CSharpWrapperPINVOKE.nodeConfig_name_get(swigCPtr);
      if (CSharpWrapperPINVOKE.SWIGPendingException.Pending) throw CSharpWrapperPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string user {
    set {
      CSharpWrapperPINVOKE.nodeConfig_user_set(swigCPtr, value);
      if (CSharpWrapperPINVOKE.SWIGPendingException.Pending) throw CSharpWrapperPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = CSharpWrapperPINVOKE.nodeConfig_user_get(swigCPtr);
      if (CSharpWrapperPINVOKE.SWIGPendingException.Pending) throw CSharpWrapperPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string sqlite3Path {
    set {
      CSharpWrapperPINVOKE.nodeConfig_sqlite3Path_set(swigCPtr, value);
      if (CSharpWrapperPINVOKE.SWIGPendingException.Pending) throw CSharpWrapperPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = CSharpWrapperPINVOKE.nodeConfig_sqlite3Path_get(swigCPtr);
      if (CSharpWrapperPINVOKE.SWIGPendingException.Pending) throw CSharpWrapperPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string outputStream {
    set {
      CSharpWrapperPINVOKE.nodeConfig_outputStream_set(swigCPtr, value);
      if (CSharpWrapperPINVOKE.SWIGPendingException.Pending) throw CSharpWrapperPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = CSharpWrapperPINVOKE.nodeConfig_outputStream_get(swigCPtr);
      if (CSharpWrapperPINVOKE.SWIGPendingException.Pending) throw CSharpWrapperPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int openPortsStart {
    set {
      CSharpWrapperPINVOKE.nodeConfig_openPortsStart_set(swigCPtr, value);
    } 
    get {
      int ret = CSharpWrapperPINVOKE.nodeConfig_openPortsStart_get(swigCPtr);
      return ret;
    } 
  }

  public int openPortsEnd {
    set {
      CSharpWrapperPINVOKE.nodeConfig_openPortsEnd_set(swigCPtr, value);
    } 
    get {
      int ret = CSharpWrapperPINVOKE.nodeConfig_openPortsEnd_get(swigCPtr);
      return ret;
    } 
  }

  public string hashSeed {
    set {
      CSharpWrapperPINVOKE.nodeConfig_hashSeed_set(swigCPtr, value);
      if (CSharpWrapperPINVOKE.SWIGPendingException.Pending) throw CSharpWrapperPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = CSharpWrapperPINVOKE.nodeConfig_hashSeed_get(swigCPtr);
      if (CSharpWrapperPINVOKE.SWIGPendingException.Pending) throw CSharpWrapperPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public nodeConfig() : this(CSharpWrapperPINVOKE.new_nodeConfig(), true) {
  }

}

}
