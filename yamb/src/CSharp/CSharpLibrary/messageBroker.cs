//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace messageBroker {

public class messageBroker : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal messageBroker(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(messageBroker obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~messageBroker() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CSharpWrapperPINVOKE.delete_messageBroker(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public messageBroker(nodeConfig _conf) : this(CSharpWrapperPINVOKE.new_messageBroker(nodeConfig.getCPtr(_conf)), true) {
    if (CSharpWrapperPINVOKE.SWIGPendingException.Pending) throw CSharpWrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  public void start() {
    CSharpWrapperPINVOKE.messageBroker_start(swigCPtr);
  }

  public void addCallbackToRoom(string roomId, messageHandler callback) {
    CSharpWrapperPINVOKE.messageBroker_addCallbackToRoom(swigCPtr, roomId, messageHandler.getCPtr(callback));
    if (CSharpWrapperPINVOKE.SWIGPendingException.Pending) throw CSharpWrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  public void joinRoom(string roomId) {
    CSharpWrapperPINVOKE.messageBroker_joinRoom(swigCPtr, roomId);
    if (CSharpWrapperPINVOKE.SWIGPendingException.Pending) throw CSharpWrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  public void send2client(string clientId, string roomId, string message) {
    CSharpWrapperPINVOKE.messageBroker_send2client(swigCPtr, clientId, roomId, message);
    if (CSharpWrapperPINVOKE.SWIGPendingException.Pending) throw CSharpWrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  public void broadcast2Room(string roomId, string message) {
    CSharpWrapperPINVOKE.messageBroker_broadcast2Room(swigCPtr, roomId, message);
    if (CSharpWrapperPINVOKE.SWIGPendingException.Pending) throw CSharpWrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  public void leaveRoom(string roomId) {
    CSharpWrapperPINVOKE.messageBroker_leaveRoom(swigCPtr, roomId);
    if (CSharpWrapperPINVOKE.SWIGPendingException.Pending) throw CSharpWrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  public roomIdsVector getRoomIdsVector() {
    roomIdsVector ret = new roomIdsVector(CSharpWrapperPINVOKE.messageBroker_getRoomIdsVector(swigCPtr), true);
    return ret;
  }

  public nodeConfig getNodeConfig() {
    nodeConfig ret = new nodeConfig(CSharpWrapperPINVOKE.messageBroker_getNodeConfig(swigCPtr), true);
    return ret;
  }

  public stringvector getNodeIds(string arg0) {
    stringvector ret = new stringvector(CSharpWrapperPINVOKE.messageBroker_getNodeIds(swigCPtr, arg0), true);
    if (CSharpWrapperPINVOKE.SWIGPendingException.Pending) throw CSharpWrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
